CSCI 162 -- Problem-Solving, Programming and Data Representation

Lab 19: The Text Adventure Game

In this lab you will code the basic classes for the adventure game. You'll work
in pairs, but in collaboration with the other pairs. As a pair, you'll be
responsible for coding a Place, Connection, Possession or Character abstract
class. These classes have to work together, however, so you'll have to be sure
that your class works with the others. You'll also need to work out at least
one common interface (for Possessions and Characters) depending on how you
organize the Place contents.

Once you have finished your class, you will share it with the others. Then you
can begin designing the specific subclasses (like potions or swords or axes or
spell scrolls or whatever).

In the next lab, you'll put the pieces together to create a working game.


Some guidelines:

1. The Place
  a. The Place needs collections of contents and connections, as well as
     physical information such as width and height.
  b. It needs the ability to display the contents and doors in the place since
     the player needs to have a command "look" or "view" or something that will
     show what's in the place.
  c. Different places have different numbers of connections, but the direction
     of connections may be fixed.
  d. It will probably need other things as well.

2. The Connection
  a. Connections may be blocked; blocked connections need an unblocking
     mechanism, such as a key or a spell; different connections may have
     different unblocking mechanisms and some may always be open.
  b. Connections lead to another place.
  c. Connections may have other properties.

3. The Possession
  a. Possession may be in a place or they may be carried by a character. They
     should there for have properties such as weight or dimensions that
     help determine whether a character can handle them.
  b. Is it possible for a character to pick up another character? If so,
     does that change the relationship of the Possesion and Character classes?
  c. What properties do all possession have? What properties are limited to
     certain categories of possessions?
  d. Create at least a couple abstract subclasses that represent more specific
     types of possessions (such as weapons or food).

4. The Character
  a. Both the player(s) and non-players (such as monsters and pogowomen) are
     characters in that they have behaviors (as opposed to possessions, which
     don't do things). Consider the kinds of behaviors that are common to all
     characters (whether they are players or not.
  b. Do non-players have any common behaviors that players don't have? If so,
     you'll need a subclass for them.
  c. Do players have any common behaviors that non-players don't have? Ditto.
  d. Characters (at least players) have a collection of possessions. Are
     those possessions also part of the place the character is in? What
     happens to a character's possessions if the character dies?

ALWAYS: Try to think ahead to properties or actions associated with subclasses
of your classes or interfaces so that you design each part to facilitate
handling of those properties or actions.
